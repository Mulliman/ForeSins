@using ForeSins.App.Database
@using ForeSins.App.Shared.Surfaces

@page "/edit-round/{roundId:guid?}"
@layout MainLayout

@inject Grader Grader
@inject RoundRepository Repo
@inject NavigationManager NavManager
@inject IDialogService Dialog

<Green>
	<div class="fs-heading-spacer"></div>

	<div style="display:block; overflow: auto">
		<h2 class="fs-heading mt-5">@(IsExisting ? "Edit round" : "New round")</h2>

		<div class="fs-max-80 fs-input-panel">
			<h3 class="fs-heading mt-5" style="color:@ForeSinsTheme.MainRed">Round Date</h3>

			<MudDatePicker @bind-Date="Round.Date" InputVariant="Variant.Outlined" PickerVariant="PickerVariant.Dialog" DisableToolbar="true" MaxDate="DateTime.Today" Rounded="true" Style="margin:0" />

			<Cta Text="Confess your sins" EndIcon="@Icons.Filled.ArrowDownward" Colour="Color.Primary" ScrollToId="step-sins" Class="mt-8" />
		</div>
	</div>

	<GrassSpacer Size="@GrassSizes.Normal"></GrassSpacer>
</Green>

<Hell HasCurvedBottom="true" HasCurvedTop="true" HasGrass="true">
	<div id="step-sins" class="fs-scroll-target" style="z-index:99999; position:relative">
		<h2 class="fs-heading mt-5">How did you sin?</h2>

		<SinsInputs ValueChanged="OnSinScoreChanged" Scores="Round"></SinsInputs>
	</div>

	<Cta Text="Fill in round details" Class="mt-3" EndIcon="@Icons.Filled.ArrowDownward" Colour="Color.Primary" IsWhite="true" ScrollToId="step-scores" />
</Hell>

<Green>
	<GrassSpacer Size="@GrassSizes.Normal"></GrassSpacer>
	<div id="step-scores" class="fs-scroll-target--small">
		<div style="display:block; overflow: auto">
			<h2 class="fs-heading mt-5">What did you score?</h2>

			<div class="fs-max-80 fs-input-panel">

				<h3 class="fs-heading mt-5" style="color:@ForeSinsTheme.MainRed">Handicap Index</h3>
				<HandicapIndexInput Value="@Round.HandicapIndex" Format="N1"></HandicapIndexInput>

				<h3 class="fs-heading mt-5" style="color:@ForeSinsTheme.MainRed">Course Handicap</h3>
				<HandicapInput Value="@Round.CourseHandicap" ValueChanged="OnHandicapChanged"></HandicapInput>

				<h3 class="fs-heading mt-5" style="color:@ForeSinsTheme.MainRed">Result to Par</h3>
				<ScoreInput Value="Round.ResultToPar" ValueChanged="OnGrossChanged"></ScoreInput>

				<h3 class="fs-heading mt-5" style="color:@ForeSinsTheme.MainRed">Result to Handicap</h3>
				<ScoreInput Value="Round.ResultToHandicap" ValueChanged="OnNettChanged"></ScoreInput>

				<Cta Text="View result" Class="mt-8" EndIcon="@Icons.Filled.ArrowDownward" Colour="Color.Primary" ScrollToId="step-results" />
			</div>
		</div>
	</div>

	<GrassSpacer Size="@GrassSizes.Normal"></GrassSpacer>
</Green>

<Cosmos HasCurvedTop="true">
	<div id="step-results" class="fs-scroll-target" style="display:block; overflow: auto">
		<h2 class="fs-heading mt-5">Result</h2>

		<RoundCertificate Round="Round" Grade="Grade" />
	</div>

	<Cta Text="Save" EndIcon="@Icons.Filled.Check" IsImportant="true" Colour="Color.Primary" Class="mt-3 mb-8" OnClick="SaveRound" />
</Cosmos>

<BottomButtons>
	<Left>
		<MudFab Icon="@Icons.Filled.ArrowBack" Color="Color.Dark" Style="border:2px solid white" Link="/dashboard"></MudFab>
	</Left>

	<Right>
		@if (IsExisting)
				{
  <MudFab Icon="@Icons.Filled.Delete" Color="Color.Primary" Style="border:2px solid white" OnClick="DeletePrompt"></MudFab>
		}
	</Right>
</BottomButtons>

@code {
	[Parameter] public Guid? RoundId { get; set; }

	[Parameter] public Round Round { get; set; } = new Round() { HandicapIndex = 8.1, CourseHandicap = 9, Date = DateTime.Today };

	public bool IsExisting = false;

	public Grades Grade => Grader.Grade(Round);

	protected override async Task OnInitializedAsync()
	{
		if (!RoundId.HasValue)
		{
			var lastRound = await Repo.GetLastRound();
			Round = new Round() { HandicapIndex = lastRound?.HandicapIndex ?? 0, CourseHandicap = lastRound?.CourseHandicap ?? 0, Date = DateTime.Today };
		}
		else
		{
			var foundRound = await Repo.GetRound(RoundId.Value);

			if (foundRound == null)
			{
				NavManager.NavigateTo("/dashboard");
			}

			Round = foundRound;
			IsExisting = true;
		}
	}

	public void OnGrossChanged(int value)
	{
		Console.WriteLine("OnGrossChanged " + value);
		Round.ResultToPar = value;
		Round.ResultToHandicap = Round.ResultToPar - ((int)Round.CourseHandicap);

		StateHasChanged();
	}

	public void OnNettChanged(int value)
	{
		Console.WriteLine("OnNettChanged " + value);
		Round.ResultToHandicap = value;
		Round.ResultToPar = Round.ResultToHandicap + ((int)Round.CourseHandicap);

		StateHasChanged();
	}

	public void OnHandicapChanged(double value)
	{
		Console.WriteLine("OnHandicapChanged " + value);
		Round.CourseHandicap = (int)value;
		Round.ResultToHandicap = Round.ResultToPar - ((int)Round.CourseHandicap);

		StateHasChanged();
	}

	public void OnSinScoreChanged(SinScore value)
	{
		Console.WriteLine("OnSinScoreChanged " + value);

		switch (value.Sin)
		{
			case Sins.ScrappyDoubles:
				Round.ScrappyDoubles = value.Value;
				StateHasChanged();
				return;

			case Sins.ShockingChips:
				Round.ShockingChips = value.Value;
				StateHasChanged();
				return;

			case Sins.SickeningYips:
				Round.SickeningYips = value.Value;
				StateHasChanged();
				return;

			case Sins.SplashTroubles:
				Round.SplashTroubles = value.Value;
				StateHasChanged();
				return;

			case Sins.StupidDecisions:
				Round.StupidDecisions = value.Value;
				StateHasChanged();
				return;

			case Sins.SquanderedPositions:
				Round.SquanderedPositions = value.Value;
				StateHasChanged();
				return;

			default:
				return;
		}
	}

	public async Task SaveRound()
	{
		Console.WriteLine("SaveRound");
		await Repo.SaveRound(Round);

		NavManager.NavigateTo("/dashboard");
	}

	public async Task DeletePrompt()
	{
		var parameters = new DialogParameters();
		parameters.Add("ContentText", $"Do you really want to delete this round from {Round.Date.ToDateString()}?");
		parameters.Add("ButtonText", "Delete");
		parameters.Add("Color", Color.Primary);

		var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

		var refd = Dialog.Show<Confirm>("Delete", parameters, options);

		var confirmed = await refd.Result;

		if (!confirmed.Cancelled)
		{
			await DeleteRound();
		}
	}

	public async Task DeleteRound()
	{
		Console.WriteLine("DeleteRound");
		await Repo.DeleteRound(Round.Id);

		NavManager.NavigateTo("/dashboard");
	}
}