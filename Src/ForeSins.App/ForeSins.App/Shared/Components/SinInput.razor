<div class="fs-sin-input">
    <Sin TheSin="Sin" OnClick="Increment" />

    <div class="fs-sin-input__fieldset">
        @if (!IsReadonly)
        {
            <MudIconButton Icon="@Icons.Material.Filled.Remove" Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Small" @onclick="Decrement" />
        }
        
        @if (IsAverage)
        {
            <input class="fs-sin-input__field @GetPlusMinusClass(Average)" min="0" max="30" value="@Average" @oninput="OnChanged" @onchange="OnChanged" type="number" @attributes="Attrs" />
        }
        else
        {
            <input class="fs-sin-input__field" min="0" max="30" value="@Value" @oninput="OnChanged" @onchange="OnChanged" type="number" @attributes="Attrs" />
        }
        
        
        @if (!IsReadonly)
        {
            <MudIconButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Small" @onclick="Increment" />
        }
    </div>
        
</div>

@code {
    [Parameter] public Sins Sin { get; set; }

    [Parameter] public uint Value { get; set; }

    [Parameter] public double Average { get; set; }

    [Parameter] public bool IsAverage { get; set; }

    [Parameter] public bool IsReadonly { get; set; }

    [Parameter] public bool IsPlusMinusStyled { get; set; }

    [Parameter] public EventCallback<SinScore> ValueChanged { get; set; }

    public Dictionary<string, object> Attrs => IsReadonly
        ? new Dictionary<string, object>() {{ "readonly", "readonly" }}
        : null;

    public void Decrement()
    {
        Value = Value <= 1 ? 0 : Value - 1;
        if (ValueChanged.HasDelegate) ValueChanged.InvokeAsync(new SinScore { Sin = Sin, Value = Value });

        StateHasChanged();
            ShouldRender();
    }

    public void Increment()
    {
        Value = Value + 1;
        if (ValueChanged.HasDelegate) ValueChanged.InvokeAsync(new SinScore { Sin = Sin, Value = Value });

        StateHasChanged();
            ShouldRender();
    }

    public void OnChanged(ChangeEventArgs args)
    {
        var val = (string)args.Value;
        uint parsed = 0;

        Console.WriteLine("OnChanged " + val);

        if (uint.TryParse(val, out parsed))
        {
            Value = parsed;
            var para = new SinScore { Sin = Sin, Value = Value };

            if (ValueChanged.HasDelegate) ValueChanged.InvokeAsync(para);

            StateHasChanged();
            ShouldRender();
        }
    }

    public string GetPlusMinusClass(double value)
    {
        if (!IsPlusMinusStyled) return "";
        if (value < 0) return "fs-sin-input__field--minus";
        if (value > 0) return "fs-sin-input__field--plus";
        return "";
    }
}